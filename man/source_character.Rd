% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/api.R
\name{source_character}
\alias{source_character}
\title{Source a remake script}
\usage{
source_character(str, envir = .GlobalEnv, rewrite_source = TRUE)
}
\arguments{
\item{str}{A character vector containing code to be sourced.  Each
element of the vector will be treated as a separate line.}

\item{envir}{An environment to source into (by default the global
environment).}

\item{rewrite_source}{Because calls to \code{source} within a
script will still be evaluated in the global environment, so this
may have side-effects when running in a non-global
environment.  Setting \code{rewrite_source=TRUE} (the default)
attempts to rewrite top-level calls to \code{source} to source
locally.  This is likely error prone but the current
implementation matches the way that \code{make_script} produces
calls to \code{source}.}
}
\value{
The environment into which the code is sourced,
invisibly.  This is primarily useful when used as
\code{source_remake_script(script, envir=new.env())}, as the
environment created in the call is returned.
}
\description{
Convenience function for sourcing a remake script (or other
arbitrary code) that is present as a character vector rather than
saved in a file.  This just takes
care of writing the character vector to a temporary file and
running R's \code{\link{source}} over it.  It will also source
other arbitrary sets of R code that are character vectors rather
than files.
}
\examples{
str <- c("x <- runif(10)",
         "y <- runif(10)",
         "plot(x, y)")
e <- source_character(str, envir=new.env())
ls(e) # x, y
}
